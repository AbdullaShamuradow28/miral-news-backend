import aiogram
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, FSInputFile
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import types, F, Router
from aiogram.client.default import DefaultBotProperties 

BOT_TOKEN = "7758326963:AAE8Lhrs4RJwRJRUXy-nszsoVfC1Cmb7OAA"
MIRAL_STUDIO_CHANNEL_ID = -1002255895973
IDEAS_FILE = "ideas.txt"

class UserState(StatesGroup):
    waiting_for_idea = State()
    waiting_for_bug_description = State()

router = Router()

async def check_channel_subscription(bot: Bot, user_id: int, channel_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        chat_member = await bot.get_chat_member(channel_id, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@router.message(aiogram.filters.Command("start"))
async def start_bot(msg: types.Message, bot: Bot):
    user_id = msg.from_user.id
    is_subscribed = await check_channel_subscription(bot, user_id, MIRAL_STUDIO_CHANNEL_ID)

    if not is_subscribed:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Miral Studio", url="https://t.me/miralstudio")]
        ])
        await msg.answer(
            text="–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç Miral News. \n\n"
                 "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª **Miral Studio**, "
                 "—á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!",
            reply_markup=markup
        )
        await msg.answer("–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ /start –µ—â—ë —Ä–∞–∑.")
    else:
        main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é üí°")],
                [KeyboardButton(text="–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ üêû")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        await msg.answer(
            text="–ü—Ä–∏–≤–µ—Ç! üëã –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç Miral News! \n\n"
                 "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ. \n"
                 "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=main_keyboard
        )

@router.message(F.text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é üí°")
async def suggest_idea_handler(msg: types.Message, state: FSMContext):
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π (–º–æ–∂–µ—à—å –∏—Ö –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª–æ–º ‚Ä¢ ).")
    await state.set_state(UserState.waiting_for_idea)

@router.message(UserState.waiting_for_idea)
async def process_idea(msg: types.Message, state: FSMContext):
    idea_text = msg.text
    user_info = f"@{msg.from_user.username}" if msg.from_user.username else f"ID: {msg.from_user.id}"

    with open(IDEAS_FILE, "a", encoding="utf-8") as f:
        f.write(f"–ò–¥–µ—è –æ—Ç {user_info}:\n{idea_text}\n---\n")

    await msg.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∏–¥–µ—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
    await state.clear()

@router.message(F.text == "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ üêû")
async def report_bug_handler(msg: types.Message):
    bug_type_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É)", callback_data="report_critical")],
        [InlineKeyboardButton(text="–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (–º–µ—à–∞–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏)", callback_data="report_major")],
        [InlineKeyboardButton(text="–ú–µ–ª–∫–∏–π –±–∞–≥/–û–ø–µ—á–∞—Ç–∫–∞", callback_data="report_minor")]
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=bug_type_markup)

@router.callback_query(F.data.startswith("report_"))
async def process_bug_report_type(callback: types.CallbackQuery, state: FSMContext):
    report_type_code = callback.data.split("_")[1]
    
    report_type_name = {
        "critical": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
        "major": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞",
        "minor": "–ú–µ–ª–∫–∏–π –±–∞–≥/–û–ø–µ—á–∞—Ç–∫–∞"
    }.get(report_type_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

    await state.update_data(bug_type=report_type_name)

    response_text = ""
    if report_type_code == "critical":
        response_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{report_type_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–æ–¥—Ä–æ–±–Ω–æ** –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É: –∫–∞–∫ –µ—ë –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –≤–∏–¥–µ–æ, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∏—Ö —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    elif report_type_code == "major":
        response_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{report_type_name}'. –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É, –∫–∞–∫ —á–∞—Å—Ç–æ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∏ –∫–∞–∫ –æ–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É."
    elif report_type_code == "minor":
        response_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{report_type_name}'. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–¥–µ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —ç—Ç–æ."

    await callback.message.edit_text(response_text)
    await callback.answer()

    await state.set_state(UserState.waiting_for_bug_description)

@router.message(UserState.waiting_for_bug_description)
async def process_bug_description(msg: types.Message, state: FSMContext):
    bug_description = msg.text
    user_info = f"@{msg.from_user.username}" if msg.from_user.username else f"ID: {msg.from_user.id}"
    
    data = await state.get_data()
    bug_type = data.get("bug_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –º–Ω–µ –≤ –ª—Å:
    # ADMIN_CHAT_ID = YOUR_ADMIN_ID
    # if ADMIN_CHAT_ID:
    #     await msg.bot.send_message(
    #         ADMIN_CHAT_ID,
    #         f"üö® **–ù–û–í–´–ô –ë–ê–ì-–†–ï–ü–û–†–¢!** üö®\n"
    #         f"**–û—Ç:** {user_info}\n"
    #         f"**–¢–∏–ø:** {bug_type}\n"
    #         f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{bug_description}",
    #         parse_mode=ParseMode.MARKDOWN
    #     )
    # else:
    #     print(f"–ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –æ—Ç {user_info} ({bug_type}): {bug_description}")


    await msg.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    await state.clear()

async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())